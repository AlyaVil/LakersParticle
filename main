let inc = 0.1;
let scl = 20; // Scale for drawing vectors
let cols, rows; // column and rows for every scale(vectors)

let zoff = 0;

let fr; //framerate

let particles = []; // particle variables

let flowfield; // flowfield variables

function setup() {
  createCanvas(windowWidth, windowHeight);
  cols = floor(width / scl); // column even number  
  rows = floor(height / scl); // row even number
  // pixelDensity(1);
  fr = createP('');

  flowfield = new Array(cols * rows);

  for (let i = 0; i < 1000; i++) {
    particles[i] = new Particle();
  }
  background(255,160,0);
}

function draw() {
  // randomSeed(10); stopping let v randomness
  let yoff = 0;
  // loadPixels();
  for (let y = 0; y < rows; y++) {
    let xoff = 0;
    for (let x = 0; x < cols; x++) {
      let index = x + y * cols;
      let angle = noise(xoff, yoff, zoff) * TWO_PI * 4;
      let v = p5.Vector.fromAngle(angle); // weird vector random
      v.setMag(0.5); // set magnitude
      flowfield[index] = v;
// let v = p5.Vector.fromAngle(angle);
      // let r = random(255); // if using this function then all the pixels will be random like tv noise
      // let r = noise(xoff, yoff) * 255;
      // let v = p5.Vector.fromAngle(noise(xoff, yoff, yoff) * TWO_PI);
      // let v = p5.Vector.fromAngle(PI/6); // weird vector in half
      // let v = p5.Vector.fromAngle(random(TWO_PI)); // weird vector random
      // let r = noise(xoff) * 255; // if using this function then all the pixels will x value (width)
      // let r = noise(yoff) * 255;  // if using this function then all the pixels will y value (height)
      // pixels[index + 0] = r;
      // pixels[index + 1] = r;
      // pixels[index + 2] = r;
      // pixels[index + 3] = 255;
      // fill(r);
      // rect(x * scl, y * scl, scl, scl);
      // execute only two lines above for disco dance floor effect
      xoff += inc;
      stroke(0, 110);
      // push();
      // translate(x * scl, y * scl);
      // rotate(v.heading());
      // strokeWeight(1);
      // line(0, 0, scl, 0);


      // pop();
    }
    yoff += inc;

    zoff += 0.0001;
  }
  // updatePixels();
  //noLoop();

  for (let i = 0; i < particles.length; i++) {
    particles[i].follow(flowfield);
    particles[i].update();
    particles[i].edges();
    particles[i].show();

  }


  // particles[0].update();
  // particles[0].show();
  fr.html(floor(frameRate()));
}
